// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/image.proto

package image

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Image service

func NewImageEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Image service

type ImageService interface {
	Resize(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	Draw(ctx context.Context, in *DrawRequest, opts ...client.CallOption) (*DrawResponse, error)
	ToWebP(ctx context.Context, in *ToWebPRequest, opts ...client.CallOption) (*ToWebPResponse, error)
}

type imageService struct {
	c    client.Client
	name string
}

func NewImageService(name string, c client.Client) ImageService {
	return &imageService{
		c:    c,
		name: name,
	}
}

func (c *imageService) Resize(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Image.Resize", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageService) Draw(ctx context.Context, in *DrawRequest, opts ...client.CallOption) (*DrawResponse, error) {
	req := c.c.NewRequest(c.name, "Image.Draw", in)
	out := new(DrawResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageService) ToWebP(ctx context.Context, in *ToWebPRequest, opts ...client.CallOption) (*ToWebPResponse, error) {
	req := c.c.NewRequest(c.name, "Image.ToWebP", in)
	out := new(ToWebPResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Image service

type ImageHandler interface {
	Resize(context.Context, *CallRequest, *CallResponse) error
	Draw(context.Context, *DrawRequest, *DrawResponse) error
	ToWebP(context.Context, *ToWebPRequest, *ToWebPResponse) error
}

func RegisterImageHandler(s server.Server, hdlr ImageHandler, opts ...server.HandlerOption) error {
	type image interface {
		Resize(ctx context.Context, in *CallRequest, out *CallResponse) error
		Draw(ctx context.Context, in *DrawRequest, out *DrawResponse) error
		ToWebP(ctx context.Context, in *ToWebPRequest, out *ToWebPResponse) error
	}
	type Image struct {
		image
	}
	h := &imageHandler{hdlr}
	return s.Handle(s.NewHandler(&Image{h}, opts...))
}

type imageHandler struct {
	ImageHandler
}

func (h *imageHandler) Resize(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.ImageHandler.Resize(ctx, in, out)
}

func (h *imageHandler) Draw(ctx context.Context, in *DrawRequest, out *DrawResponse) error {
	return h.ImageHandler.Draw(ctx, in, out)
}

func (h *imageHandler) ToWebP(ctx context.Context, in *ToWebPRequest, out *ToWebPResponse) error {
	return h.ImageHandler.ToWebP(ctx, in, out)
}
